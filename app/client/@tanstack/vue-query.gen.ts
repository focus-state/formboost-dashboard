// This file is auto-generated by @hey-api/openapi-ts

import { type Options, AccessService, UserAdminService, UserService, BillingService, DomainsService, FormsService, SubmissionsService, FormFieldsService, NotificationSettingsService, ProjectsService, UtilsService, TeamsService } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/vue-query';
import type { ApiV1AccessLoginLoginData, ApiV1AccessLoginLoginError, ApiV1AccessLoginLoginResponse, ApiV1AccessLogoutLogoutData, ApiV1AccessSignupSignupData, ApiV1AccessSignupSignupError, ApiV1AccessSignupSignupResponse, ApiV1UsersListUsersData, ApiV1UsersCreateUserData, ApiV1UsersCreateUserError, ApiV1UsersCreateUserResponse, ApiV1UsersUserIdDeleteUserData, ApiV1UsersUserIdDeleteUserError, ApiV1UsersUserIdDeleteUserResponse, ApiV1UsersUserIdGetUserData, ApiV1UsersUserIdUpdateUserData, ApiV1UsersUserIdUpdateUserError, ApiV1UsersUserIdUpdateUserResponse, ApiV1UsersMeProfileData, ApiV1BillingWebhookEventHandleEventData, ApiV1BillingWebhookEventHandleEventError, ApiV1TeamsTeamIdProjectsProjectIdDomainsListDomainsData, ApiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainData, ApiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainError, ApiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainResponse, ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdDeleteDomainData, ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdDeleteDomainError, ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdDeleteDomainResponse, ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdGetDomainData, ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdUpdateDomainData, ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdUpdateDomainError, ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdUpdateDomainResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsListFormsData, ApiV1TeamsTeamIdProjectsProjectIdFormsCreateFormData, ApiV1TeamsTeamIdProjectsProjectIdFormsCreateFormError, ApiV1TeamsTeamIdProjectsProjectIdFormsCreateFormResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdDeleteFormData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdDeleteFormError, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdDeleteFormResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdGetFormData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdUpdateFormData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdUpdateFormError, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdUpdateFormResponse, ApiV1fFormIdCreateSubmissionData, ApiV1fFormIdCreateSubmissionError, ApiV1fFormIdCreateSubmissionResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdDeleteSubmissionData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdDeleteSubmissionError, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdDeleteSubmissionResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdGetSubmissionData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdFileFormFieldGetSubmissionFileData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsListSubmissionsData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsListFormFieldsData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldError, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdDeleteFormFieldData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdDeleteFormFieldError, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdDeleteFormFieldResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdGetFormFieldData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdUpdateFormFieldData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdUpdateFormFieldError, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdUpdateFormFieldResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsListNotificationSettingssData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsError, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdDeleteNotificationSettingsData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdDeleteNotificationSettingsError, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdDeleteNotificationSettingsResponse, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdGetNotificationSettingsData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdUpdateNotificationSettingsData, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdUpdateNotificationSettingsError, ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdUpdateNotificationSettingsResponse, ApiV1TeamsTeamIdProjectsListProjectsData, ApiV1TeamsTeamIdProjectsCreateProjectData, ApiV1TeamsTeamIdProjectsCreateProjectError, ApiV1TeamsTeamIdProjectsCreateProjectResponse, ApiV1TeamsTeamIdProjectsProjectIdDeleteProjectData, ApiV1TeamsTeamIdProjectsProjectIdDeleteProjectError, ApiV1TeamsTeamIdProjectsProjectIdDeleteProjectResponse, ApiV1TeamsTeamIdProjectsProjectIdGetProjectData, ApiV1TeamsTeamIdProjectsProjectIdUpdateProjectData, ApiV1TeamsTeamIdProjectsProjectIdUpdateProjectError, ApiV1TeamsTeamIdProjectsProjectIdUpdateProjectResponse, ApiV1HealthCheckHealthData, ApiV1TeamsListTeamsData, ApiV1TeamsCreateTeamData, ApiV1TeamsCreateTeamError, ApiV1TeamsCreateTeamResponse, ApiV1TeamsTeamIdDeleteTeamData, ApiV1TeamsTeamIdDeleteTeamError, ApiV1TeamsTeamIdDeleteTeamResponse, ApiV1TeamsTeamIdGetTeamData, ApiV1TeamsTeamIdUpdateTeamData, ApiV1TeamsTeamIdUpdateTeamError, ApiV1TeamsTeamIdUpdateTeamResponse, ApiV1TeamsTeamIdStorageDirectorySizeGetStorageDirectorySizeData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const apiV1AccessLoginLoginQueryKey = (options: Options<ApiV1AccessLoginLoginData>) => createQueryKey('apiV1AccessLoginLogin', options);

export const apiV1AccessLoginLoginOptions = (options: Options<ApiV1AccessLoginLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AccessService.apiV1AccessLoginLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1AccessLoginLoginQueryKey(options)
    });
};

export const apiV1AccessLoginLoginMutation = (options?: Partial<Options<ApiV1AccessLoginLoginData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1AccessLoginLoginResponse, AxiosError<ApiV1AccessLoginLoginError>, Options<ApiV1AccessLoginLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AccessService.apiV1AccessLoginLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1AccessLogoutLogoutQueryKey = (options?: Options<ApiV1AccessLogoutLogoutData>) => createQueryKey('apiV1AccessLogoutLogout', options);

export const apiV1AccessLogoutLogoutOptions = (options?: Options<ApiV1AccessLogoutLogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AccessService.apiV1AccessLogoutLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1AccessLogoutLogoutQueryKey(options)
    });
};

export const apiV1AccessLogoutLogoutMutation = (options?: Partial<Options<ApiV1AccessLogoutLogoutData>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ApiV1AccessLogoutLogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AccessService.apiV1AccessLogoutLogout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1AccessSignupSignupQueryKey = (options: Options<ApiV1AccessSignupSignupData>) => createQueryKey('apiV1AccessSignupSignup', options);

export const apiV1AccessSignupSignupOptions = (options: Options<ApiV1AccessSignupSignupData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AccessService.apiV1AccessSignupSignup({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1AccessSignupSignupQueryKey(options)
    });
};

export const apiV1AccessSignupSignupMutation = (options?: Partial<Options<ApiV1AccessSignupSignupData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1AccessSignupSignupResponse, AxiosError<ApiV1AccessSignupSignupError>, Options<ApiV1AccessSignupSignupData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AccessService.apiV1AccessSignupSignup({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1UsersListUsersQueryKey = (options?: Options<ApiV1UsersListUsersData>) => createQueryKey('apiV1UsersListUsers', options);

export const apiV1UsersListUsersOptions = (options?: Options<ApiV1UsersListUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserAdminService.apiV1UsersListUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1UsersListUsersQueryKey(options)
    });
};

export const apiV1UsersCreateUserQueryKey = (options: Options<ApiV1UsersCreateUserData>) => createQueryKey('apiV1UsersCreateUser', options);

export const apiV1UsersCreateUserOptions = (options: Options<ApiV1UsersCreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserAdminService.apiV1UsersCreateUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1UsersCreateUserQueryKey(options)
    });
};

export const apiV1UsersCreateUserMutation = (options?: Partial<Options<ApiV1UsersCreateUserData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1UsersCreateUserResponse, AxiosError<ApiV1UsersCreateUserError>, Options<ApiV1UsersCreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UserAdminService.apiV1UsersCreateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1UsersUserIdDeleteUserMutation = (options?: Partial<Options<ApiV1UsersUserIdDeleteUserData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1UsersUserIdDeleteUserResponse, AxiosError<ApiV1UsersUserIdDeleteUserError>, Options<ApiV1UsersUserIdDeleteUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UserAdminService.apiV1UsersUserIdDeleteUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1UsersUserIdGetUserQueryKey = (options: Options<ApiV1UsersUserIdGetUserData>) => createQueryKey('apiV1UsersUserIdGetUser', options);

export const apiV1UsersUserIdGetUserOptions = (options: Options<ApiV1UsersUserIdGetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserAdminService.apiV1UsersUserIdGetUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1UsersUserIdGetUserQueryKey(options)
    });
};

export const apiV1UsersUserIdUpdateUserMutation = (options?: Partial<Options<ApiV1UsersUserIdUpdateUserData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1UsersUserIdUpdateUserResponse, AxiosError<ApiV1UsersUserIdUpdateUserError>, Options<ApiV1UsersUserIdUpdateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UserAdminService.apiV1UsersUserIdUpdateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1UsersMeProfileQueryKey = (options?: Options<ApiV1UsersMeProfileData>) => createQueryKey('apiV1UsersMeProfile', options);

export const apiV1UsersMeProfileOptions = (options?: Options<ApiV1UsersMeProfileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserService.apiV1UsersMeProfile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1UsersMeProfileQueryKey(options)
    });
};

export const apiV1BillingWebhookEventHandleEventQueryKey = (options: Options<ApiV1BillingWebhookEventHandleEventData>) => createQueryKey('apiV1BillingWebhookEventHandleEvent', options);

export const apiV1BillingWebhookEventHandleEventOptions = (options: Options<ApiV1BillingWebhookEventHandleEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await BillingService.apiV1BillingWebhookEventHandleEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1BillingWebhookEventHandleEventQueryKey(options)
    });
};

export const apiV1BillingWebhookEventHandleEventMutation = (options?: Partial<Options<ApiV1BillingWebhookEventHandleEventData>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<ApiV1BillingWebhookEventHandleEventError>, Options<ApiV1BillingWebhookEventHandleEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await BillingService.apiV1BillingWebhookEventHandleEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdDomainsListDomainsQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsListDomainsData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdDomainsListDomains', options);

export const apiV1TeamsTeamIdProjectsProjectIdDomainsListDomainsOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsListDomainsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await DomainsService.apiV1TeamsTeamIdProjectsProjectIdDomainsListDomains({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdDomainsListDomainsQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomain', options);

export const apiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await DomainsService.apiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomain({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainError>, Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomainData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await DomainsService.apiV1TeamsTeamIdProjectsProjectIdDomainsCreateDomain({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdDeleteDomainMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdDeleteDomainData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdDeleteDomainResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdDeleteDomainError>, Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdDeleteDomainData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await DomainsService.apiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdDeleteDomain({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdGetDomainQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdGetDomainData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdGetDomain', options);

export const apiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdGetDomainOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdGetDomainData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await DomainsService.apiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdGetDomain({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdGetDomainQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdUpdateDomainMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdUpdateDomainData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdUpdateDomainResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdUpdateDomainError>, Options<ApiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdUpdateDomainData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await DomainsService.apiV1TeamsTeamIdProjectsProjectIdDomainsDomainIdUpdateDomain({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsListFormsQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsListFormsData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsListForms', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsListFormsOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsListFormsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await FormsService.apiV1TeamsTeamIdProjectsProjectIdFormsListForms({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsListFormsQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsCreateFormQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsCreateFormData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsCreateForm', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsCreateFormOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsCreateFormData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await FormsService.apiV1TeamsTeamIdProjectsProjectIdFormsCreateForm({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsCreateFormQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsCreateFormMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsCreateFormData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsCreateFormResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsCreateFormError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsCreateFormData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await FormsService.apiV1TeamsTeamIdProjectsProjectIdFormsCreateForm({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdDeleteFormMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdDeleteFormData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdDeleteFormResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdDeleteFormError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdDeleteFormData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await FormsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdDeleteForm({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdGetFormQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdGetFormData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdGetForm', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdGetFormOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdGetFormData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await FormsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdGetForm({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdGetFormQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdUpdateFormMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdUpdateFormData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdUpdateFormResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdUpdateFormError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdUpdateFormData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await FormsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdUpdateForm({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1fFormIdCreateSubmissionQueryKey = (options: Options<ApiV1fFormIdCreateSubmissionData>) => createQueryKey('apiV1fFormIdCreateSubmission', options);

export const apiV1fFormIdCreateSubmissionOptions = (options: Options<ApiV1fFormIdCreateSubmissionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SubmissionsService.apiV1fFormIdCreateSubmission({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1fFormIdCreateSubmissionQueryKey(options)
    });
};

export const apiV1fFormIdCreateSubmissionMutation = (options?: Partial<Options<ApiV1fFormIdCreateSubmissionData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1fFormIdCreateSubmissionResponse, AxiosError<ApiV1fFormIdCreateSubmissionError>, Options<ApiV1fFormIdCreateSubmissionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SubmissionsService.apiV1fFormIdCreateSubmission({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdDeleteSubmissionMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdDeleteSubmissionData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdDeleteSubmissionResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdDeleteSubmissionError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdDeleteSubmissionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SubmissionsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdDeleteSubmission({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdGetSubmissionQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdGetSubmissionData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdGetSubmission', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdGetSubmissionOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdGetSubmissionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SubmissionsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdGetSubmission({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdGetSubmissionQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdFileFormFieldGetSubmissionFileQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdFileFormFieldGetSubmissionFileData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdFileFormFieldGetSubmissionFile', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdFileFormFieldGetSubmissionFileOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdFileFormFieldGetSubmissionFileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SubmissionsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdFileFormFieldGetSubmissionFile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsSubmissionIdFileFormFieldGetSubmissionFileQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsListSubmissionsQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsListSubmissionsData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsListSubmissions', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsListSubmissionsOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsListSubmissionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SubmissionsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsListSubmissions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdSubmissionsListSubmissionsQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsListFormFieldsQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsListFormFieldsData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsListFormFields', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsListFormFieldsOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsListFormFieldsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await FormFieldsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsListFormFields({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsListFormFieldsQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormField', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await FormFieldsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormField({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormFieldData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await FormFieldsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsCreateFormField({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdDeleteFormFieldMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdDeleteFormFieldData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdDeleteFormFieldResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdDeleteFormFieldError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdDeleteFormFieldData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await FormFieldsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdDeleteFormField({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdGetFormFieldQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdGetFormFieldData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdGetFormField', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdGetFormFieldOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdGetFormFieldData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await FormFieldsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdGetFormField({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdGetFormFieldQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdUpdateFormFieldMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdUpdateFormFieldData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdUpdateFormFieldResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdUpdateFormFieldError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdUpdateFormFieldData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await FormFieldsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdFormFieldsFormFieldIdUpdateFormField({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsListNotificationSettingssQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsListNotificationSettingssData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsListNotificationSettingss', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsListNotificationSettingssOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsListNotificationSettingssData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await NotificationSettingsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsListNotificationSettingss({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsListNotificationSettingssQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettings', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await NotificationSettingsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettingsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await NotificationSettingsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsCreateNotificationSettings({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdDeleteNotificationSettingsMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdDeleteNotificationSettingsData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdDeleteNotificationSettingsResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdDeleteNotificationSettingsError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdDeleteNotificationSettingsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await NotificationSettingsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdDeleteNotificationSettings({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdGetNotificationSettingsQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdGetNotificationSettingsData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdGetNotificationSettings', options);

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdGetNotificationSettingsOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdGetNotificationSettingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await NotificationSettingsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdGetNotificationSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdGetNotificationSettingsQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdUpdateNotificationSettingsMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdUpdateNotificationSettingsData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdUpdateNotificationSettingsResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdUpdateNotificationSettingsError>, Options<ApiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdUpdateNotificationSettingsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await NotificationSettingsService.apiV1TeamsTeamIdProjectsProjectIdFormsFormIdNotificationSettingsNotificationSettingsIdUpdateNotificationSettings({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsListProjectsQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsListProjectsData>) => createQueryKey('apiV1TeamsTeamIdProjectsListProjects', options);

export const apiV1TeamsTeamIdProjectsListProjectsOptions = (options: Options<ApiV1TeamsTeamIdProjectsListProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await ProjectsService.apiV1TeamsTeamIdProjectsListProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsListProjectsQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsCreateProjectQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsCreateProjectData>) => createQueryKey('apiV1TeamsTeamIdProjectsCreateProject', options);

export const apiV1TeamsTeamIdProjectsCreateProjectOptions = (options: Options<ApiV1TeamsTeamIdProjectsCreateProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await ProjectsService.apiV1TeamsTeamIdProjectsCreateProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsCreateProjectQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsCreateProjectMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsCreateProjectData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsCreateProjectResponse, AxiosError<ApiV1TeamsTeamIdProjectsCreateProjectError>, Options<ApiV1TeamsTeamIdProjectsCreateProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await ProjectsService.apiV1TeamsTeamIdProjectsCreateProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdDeleteProjectMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdDeleteProjectData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdDeleteProjectResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdDeleteProjectError>, Options<ApiV1TeamsTeamIdProjectsProjectIdDeleteProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await ProjectsService.apiV1TeamsTeamIdProjectsProjectIdDeleteProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdProjectsProjectIdGetProjectQueryKey = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdGetProjectData>) => createQueryKey('apiV1TeamsTeamIdProjectsProjectIdGetProject', options);

export const apiV1TeamsTeamIdProjectsProjectIdGetProjectOptions = (options: Options<ApiV1TeamsTeamIdProjectsProjectIdGetProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await ProjectsService.apiV1TeamsTeamIdProjectsProjectIdGetProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdProjectsProjectIdGetProjectQueryKey(options)
    });
};

export const apiV1TeamsTeamIdProjectsProjectIdUpdateProjectMutation = (options?: Partial<Options<ApiV1TeamsTeamIdProjectsProjectIdUpdateProjectData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdProjectsProjectIdUpdateProjectResponse, AxiosError<ApiV1TeamsTeamIdProjectsProjectIdUpdateProjectError>, Options<ApiV1TeamsTeamIdProjectsProjectIdUpdateProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await ProjectsService.apiV1TeamsTeamIdProjectsProjectIdUpdateProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1HealthCheckHealthQueryKey = (options?: Options<ApiV1HealthCheckHealthData>) => createQueryKey('apiV1HealthCheckHealth', options);

export const apiV1HealthCheckHealthOptions = (options?: Options<ApiV1HealthCheckHealthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UtilsService.apiV1HealthCheckHealth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1HealthCheckHealthQueryKey(options)
    });
};

export const apiV1TeamsListTeamsQueryKey = (options?: Options<ApiV1TeamsListTeamsData>) => createQueryKey('apiV1TeamsListTeams', options);

export const apiV1TeamsListTeamsOptions = (options?: Options<ApiV1TeamsListTeamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await TeamsService.apiV1TeamsListTeams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsListTeamsQueryKey(options)
    });
};

export const apiV1TeamsCreateTeamQueryKey = (options: Options<ApiV1TeamsCreateTeamData>) => createQueryKey('apiV1TeamsCreateTeam', options);

export const apiV1TeamsCreateTeamOptions = (options: Options<ApiV1TeamsCreateTeamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await TeamsService.apiV1TeamsCreateTeam({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsCreateTeamQueryKey(options)
    });
};

export const apiV1TeamsCreateTeamMutation = (options?: Partial<Options<ApiV1TeamsCreateTeamData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsCreateTeamResponse, AxiosError<ApiV1TeamsCreateTeamError>, Options<ApiV1TeamsCreateTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await TeamsService.apiV1TeamsCreateTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdDeleteTeamMutation = (options?: Partial<Options<ApiV1TeamsTeamIdDeleteTeamData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdDeleteTeamResponse, AxiosError<ApiV1TeamsTeamIdDeleteTeamError>, Options<ApiV1TeamsTeamIdDeleteTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await TeamsService.apiV1TeamsTeamIdDeleteTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdGetTeamQueryKey = (options: Options<ApiV1TeamsTeamIdGetTeamData>) => createQueryKey('apiV1TeamsTeamIdGetTeam', options);

export const apiV1TeamsTeamIdGetTeamOptions = (options: Options<ApiV1TeamsTeamIdGetTeamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await TeamsService.apiV1TeamsTeamIdGetTeam({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdGetTeamQueryKey(options)
    });
};

export const apiV1TeamsTeamIdUpdateTeamMutation = (options?: Partial<Options<ApiV1TeamsTeamIdUpdateTeamData>>) => {
    const mutationOptions: UseMutationOptions<ApiV1TeamsTeamIdUpdateTeamResponse, AxiosError<ApiV1TeamsTeamIdUpdateTeamError>, Options<ApiV1TeamsTeamIdUpdateTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await TeamsService.apiV1TeamsTeamIdUpdateTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiV1TeamsTeamIdStorageDirectorySizeGetStorageDirectorySizeQueryKey = (options: Options<ApiV1TeamsTeamIdStorageDirectorySizeGetStorageDirectorySizeData>) => createQueryKey('apiV1TeamsTeamIdStorageDirectorySizeGetStorageDirectorySize', options);

export const apiV1TeamsTeamIdStorageDirectorySizeGetStorageDirectorySizeOptions = (options: Options<ApiV1TeamsTeamIdStorageDirectorySizeGetStorageDirectorySizeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await TeamsService.apiV1TeamsTeamIdStorageDirectorySizeGetStorageDirectorySize({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiV1TeamsTeamIdStorageDirectorySizeGetStorageDirectorySizeQueryKey(options)
    });
};